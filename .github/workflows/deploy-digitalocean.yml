name: Digital Ocean App Platform CI/CD

# This workflow runs continuous integration checks before Digital Ocean App Platform
# automatically deploys the application. App Platform handles the actual deployment
# when changes are pushed to the main branch.

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Job 1: Code Quality and Linting
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 vulture
          pip install -r requirements.txt

      - name: Run Black (Code Formatting)
        run: |
          black --check --diff .
        continue-on-error: false

      - name: Run Flake8 (Linting)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: false

      - name: Run Vulture (Dead Code Detection)
        run: |
          vulture . --min-confidence 80
        continue-on-error: true  # Don't fail on dead code warnings

  # Job 2: Security Scanning
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run Safety (Dependency Vulnerability Check)
        run: |
          safety check --json || true
        continue-on-error: true

      - name: Run Bandit (Security Linter)
        run: |
          bandit -r modules/ app_modular.py -f json -o bandit-report.json || true
          bandit -r modules/ app_modular.py
        continue-on-error: true

  # Job 3: Run Tests
  test:
    name: Run Test Suite
    runs-on: ubuntu-latest

    # Set up PostgreSQL service for testing
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: test_merlin
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r requirements.txt

      - name: Set up test environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:testpassword@localhost:5432/test_merlin" >> $GITHUB_ENV
          echo "FLASK_ENV=testing" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV

      - name: Run tests with coverage
        run: |
          pytest tests/ --cov=modules --cov-report=xml --cov-report=term-missing
        continue-on-error: false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
        continue-on-error: true

  # Job 4: Build Docker Image (Validation)
  build-docker:
    name: Build and Validate Docker Image
    runs-on: ubuntu-latest
    needs: [code-quality, test]  # Only build if quality checks and tests pass

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: merlin-job-app:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker build -t merlin-test:latest .
          docker run --rm merlin-test:latest python --version
          echo "‚úÖ Docker image built and validated successfully"

  # Job 5: Database Schema Validation
  validate-schema:
    name: Validate Database Schema
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Validate schema documentation exists
        run: |
          if [ ! -f "frontend_templates/database_schema.html" ]; then
            echo "‚ùå Database schema documentation missing"
            exit 1
          fi
          echo "‚úÖ Database schema documentation found"

      - name: Check for schema automation tools
        run: |
          if [ ! -f "database_tools/update_schema.py" ]; then
            echo "‚ùå Schema automation tool missing"
            exit 1
          fi
          echo "‚úÖ Schema automation tools found"

  # Job 6: Deployment Notification (runs after all checks pass)
  deployment-status:
    name: Deployment Status
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, test, build-docker, validate-schema]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Deployment notification
        run: |
          echo "‚úÖ All CI checks passed!"
          echo "üöÄ Digital Ocean App Platform will now automatically deploy this commit."
          echo "üìä Monitor deployment: https://cloud.digitalocean.com/apps"
          echo "üîó Commit SHA: ${{ github.sha }}"
          echo "üë§ Pushed by: ${{ github.actor }}"

  # Job 7: Notify on Failure
  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, test, build-docker, validate-schema]
    if: failure()

    steps:
      - name: Failure notification
        run: |
          echo "‚ùå CI checks failed - deployment blocked"
          echo "üîç Review the failed jobs above"
          echo "üõ†Ô∏è  Fix issues before deployment can proceed"
