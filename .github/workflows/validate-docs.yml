name: Documentation Validation

on:
  push:
    branches: ['**']
    paths:
      - '**.md'
      - 'tools/**'
      - '.github/workflows/validate-docs.yml'
  pull_request:
    branches: ['main', 'develop/**']
    paths:
      - '**.md'
      - 'tools/**'

jobs:
  validate-documentation:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f tools/requirements.txt ]; then
            pip install -r tools/requirements.txt
          fi
          # Install PyYAML if not in requirements
          pip install pyyaml

      - name: Validate metadata
        id: validate-metadata
        run: |
          echo "::group::Validating YAML frontmatter"
          python tools/validate_metadata.py --all || echo "METADATA_FAILED=1" >> $GITHUB_ENV
          echo "::endgroup::"
        continue-on-error: true

      - name: Validate file locations
        id: validate-locations
        run: |
          echo "::group::Validating file placement"
          python tools/validate_location.py --scan-root || echo "LOCATION_FAILED=1" >> $GITHUB_ENV
          echo "::endgroup::"
        continue-on-error: true

      - name: Check broken links
        id: validate-links
        run: |
          echo "::group::Checking for broken links"
          python tools/validate_links.py --all --json > links_report.json || echo "LINKS_FAILED=1" >> $GITHUB_ENV
          echo "::endgroup::"
        continue-on-error: true

      - name: Collect metrics
        id: collect-metrics
        run: |
          echo "::group::Collecting documentation metrics"
          python tools/collect_metrics.py > metrics_report.txt
          cat metrics_report.txt
          echo "::endgroup::"

      - name: Generate coverage report
        id: coverage-report
        run: |
          echo "::group::Documentation Coverage Report"
          python tools/collect_metrics.py --json > metrics.json

          # Extract key metrics
          TOTAL_DOCS=$(jq '.total_docs' metrics.json)
          METADATA_COVERAGE=$(jq '.metadata_coverage_pct' metrics.json)
          ROOT_VIOLATIONS=$(jq '.root_violations' metrics.json)
          BROKEN_LINKS=$(jq '.broken_links_count' metrics.json)

          echo "📊 Documentation Metrics:"
          echo "- Total documents: $TOTAL_DOCS"
          echo "- Metadata coverage: $METADATA_COVERAGE%"
          echo "- Root violations: $ROOT_VIOLATIONS"
          echo "- Broken links: $BROKEN_LINKS"

          # Set outputs for summary
          echo "TOTAL_DOCS=$TOTAL_DOCS" >> $GITHUB_ENV
          echo "METADATA_COVERAGE=$METADATA_COVERAGE" >> $GITHUB_ENV
          echo "ROOT_VIOLATIONS=$ROOT_VIOLATIONS" >> $GITHUB_ENV
          echo "BROKEN_LINKS=$BROKEN_LINKS" >> $GITHUB_ENV
          echo "::endgroup::"

      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: documentation-reports
          path: |
            metrics_report.txt
            metrics.json
            links_report.json

      - name: Create job summary
        if: always()
        run: |
          echo "## 📚 Documentation Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Documents:** ${{ env.TOTAL_DOCS }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Metadata Coverage:** ${{ env.METADATA_COVERAGE }}%" >> $GITHUB_STEP_SUMMARY
          echo "- **Root Violations:** ${{ env.ROOT_VIOLATIONS }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Broken Links:** ${{ env.BROKEN_LINKS }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### ✅ Validation Checks" >> $GITHUB_STEP_SUMMARY

          if [ -z "$METADATA_FAILED" ]; then
            echo "- ✅ Metadata validation passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Metadata validation failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -z "$LOCATION_FAILED" ]; then
            echo "- ✅ File location validation passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ File location validation failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -z "$LINKS_FAILED" ]; then
            echo "- ✅ Link validation passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Link validation failed (see artifacts)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check for failures
        if: env.METADATA_FAILED == '1' || env.LOCATION_FAILED == '1'
        run: |
          echo "::error::Documentation validation failed. Please fix the issues above."
          exit 1

      - name: Success message
        if: success()
        run: |
          echo "::notice::✅ All documentation validation checks passed!"
